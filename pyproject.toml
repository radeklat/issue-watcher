[tool.poetry]
name = "issue-watcher"
version = "5.0.0"
description = "Python test cases watching when an issue is closed and failing a test to let you know fixed functionality is available."
authors = ["Radek LÃ¡t <radek.lat@gmail.com>"]
license = "MIT License"
readme = "README.md"
# https://pypi.org/classifiers/
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Bug Tracking",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Testing :: Unit",
    "Topic :: System :: Monitoring",
    "Typing :: Typed",
]
keywords = ["pytest", "github", "issues", "testing"]
homepage = "https://github.com/radeklat/issue-watcher"

[tool.poetry.dependencies]
python = ">=3.7.2,<=3.11"
packaging = "*"
requests = "*"
semver = "*"
ujson = "*"

[tool.poetry.dev-dependencies]
delfino-core = {version = "^4.0.1", extras = ["verify_all", "dependencies-update"]}
types-requests = "*"
typing-extensions = {python = "<=3.8", version = "*"}
zipp = {python = "<3.8", version = "*"}
importlib-metadata = {python = "<3.8", version = "*"}
types-ujson = "*"

[tool.poetry.group.dev.dependencies]
types-toml = "*"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 120
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
# Setting compatible with black. See https://black.readthedocs.io/en/stable/compatible_configs.html
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 120

[tool.pytest.ini_options]
python_functions = ["test_*", "should_*"]
testpaths = "tests/unit"
junit_family = "xunit2"

# Structure: https://docs.pytest.org/en/stable/warnings.html
# Values:    https://docs.python.org/3/library/warnings.html#describing-warning-filters
#            action:message:category:module:line
filterwarnings = []

[tool.mypy]
show_column_numbers = true
show_error_codes = true
color_output = true
warn_unused_configs = true
warn_unused_ignores = true
follow_imports = "silent"

[[tool.mypy.overrides]]
# Source code dependencies
module = [
    "semver.*",
    "delfino.*",
]
ignore_missing_imports = true

[tool.pydocstyle]
convention = "pep257"
match = "^(?!test_)(.*)(?<!config_parser)\\.py$"
add-ignore = [
    # See http://www.pydocstyle.org/en/stable/error_codes.html
    "D1",  # Missing docstrings. We rely on code reviews. Names are often descriptive enough and don't need additional docstring.
    "D202",  # "No blank lines allowed after function docstring" is false positive caused by black formatter.
    "D204",  # "1 blank line required after class docstring"
    "D401",  # "First line should be in imperative mood"
    "D413",  # "Missing blank line after last section"
]

[tool.delfino.plugins.delfino-core]
